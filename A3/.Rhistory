library(knitr)
oldwd <- getwd()
setwd("/Users/clementwu/Documents/University document/stat442/A3")
load("./diabetes.Rda")
head(diabetes)
setwd(oldwd)
plot(density(diabetes$SSPG,bw='SJ'), col='red',
main='Density Estimate of SSPG')
polygon(density(diabetes$SSPG,bw='SJ'), col='red')
n <- length(diabetes$SSPG)
plot(ppoints(n), sort(diabetes$SSPG), type='o', xlab='Proportion',
ylab='SSPG', main='Quantile plot of SSPG')
library(qqtest)
set.seed(3124159)
qqtest(diabetes$SSPG)
mixRandomly <- function(data) {
x <- data$x
y <- data$y
m <- length(x)
n <- length(y)
mix <- c(x, y)
select4x <- sample(1:(m+n), m, replace = FALSE)
new_x <- mix[select4x]
new_y <- mix[-select4x]
list(x=new_x, y=new_y)
}
back2back <- function(data, subjectNo) {
ylim <- extendrange(c(data$x, data$y))
Xdensity <- density(data$x, bw="SJ")
Ydensity <- density(data$y, bw="SJ")
Ydensity$y <- - Ydensity$y
xlim <- extendrange(c(Xdensity$y, Ydensity$y))
xyswitch <- function(xy_thing) {
yx_thing <-xy_thing
yx_thing$x <- xy_thing$y
yx_thing$y <- xy_thing$x
yx_thing }
plot(xyswitch(Xdensity), col="firebrick",
main=paste( subjectNo),
xlim=xlim, ylim=ylim)
polygon(xyswitch(Xdensity), col=adjustcolor("firebrick", 0.4))
lines(xyswitch(Ydensity), col="steelblue")
polygon(xyswitch(Ydensity), col=adjustcolor("steelblue", 0.4))
}
lineup <- function(data, showSubject=NULL, generateSubject=NULL, trueLoc=NULL, layout =c(5,4)) {
# Get the number of subjects in total
nSubjects <- layout[1] * layout[2]
if (is.null(trueLoc)) {trueLoc <- sample(1:nSubjects, 1)}
if (is.null(showSubject)) {stop("need a plot function for the subject")}
if (is.null(generateSubject)) {stop("need a function to generate subject")}
# Need to decide which subject to present
presentSubject <- function(subjectNo) {
if(subjectNo != trueLoc) {data <- generateSubject(data)}
showSubject(data, subjectNo) }
# This does the plotting
savePar <- par(mfrow=layout,
mar=c(2.5, 0.1, 3, 0.1), oma=rep(0,4))
sapply(1:nSubjects, FUN = presentSubject)
par(savePar)
# hide the true location but return information to reconstruct it.
hideLocation(trueLoc, nSubjects) }
hideLocation <- function(trueLoc, nSubjects){
possibleBaseVals <- 3:min(2*nSubjects, 50)
# remove easy base values
possibleBaseVals <- possibleBaseVals[possibleBaseVals != 10 &
possibleBaseVals != 5]
base <- sample(possibleBaseVals, 1)
offset <- sample(5:min(5*nSubjects, 125),1)
# return location information (trueLoc hidden)
list(trueLoc = paste0("log(",base^(trueLoc + offset), ", base=",
base,
") - ", offset))
}
data <- list(x = diabetes$SSPG[diabetes$ClinClass==3],
y = diabetes$SSPG[diabetes$ClinClass!=3])
set.seed(3124159)
lineup(data,
generateSubject = mixRandomly,
showSubject = back2back,
layout=c(4,5))
mixRandomly <- function(data) {
x <- data$x
y <- data$y
z <- data$z
m <- length(x)
n <- length(y)
l <- length(z)
mix <- c(x, y, z)
selectm <- sample(1:(m+n+l), m, replace = FALSE)
new_x <- mix[selectm]
remaining <- mix[-selectm]
selectn <- sample(1:(n+l), n, replace = FALSE)
new_y <- remaining[selectn]
new_z <- remaining[-selectn]
list(x=new_x, y=new_y, z=new_z)
}
myQuantilePlot <- function(data, subjectNo) {
ylim <- extendrange(c(data$x, data$y, data$z))
n_x <- length(data$x)
n_y <- length(data$y)
n_z <- length(data$z)
p_x <- ppoints(n_x)
p_y <- ppoints(n_y)
p_z <- ppoints(n_z)
plot(p_x, sort(data$x), type="b", col=adjustcolor("firebrick", 0.4),
pch=19, cex=2, ylim = ylim, lwd=1,
main=paste( subjectNo),
cex.main = 2,
ylab="", xlab="", xaxt="n", yaxt="n")
points(p_y, sort(data$y), type="b", col=adjustcolor("steelblue",
0.4),
pch=19, cex=2, lwd=1)
points(p_z, sort(data$z), type="b", col=adjustcolor("lightgreen",
0.1),
pch=19, cex=2, lwd=1)
}
set.seed(314159)
data <- list(x=diabetes$SSPG[diabetes$ClinClass==1],
y=diabetes$SSPG[diabetes$ClinClass==2],
z=diabetes$SSPG[diabetes$ClinClass==3])
lineup(data,
generateSubject = mixRandomly,
showSubject = myQuantilePlot,
layout=c(4,5))
